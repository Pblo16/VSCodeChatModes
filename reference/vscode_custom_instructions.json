{
  "reference_md": "# VS Code – Custom Instructions\n\nCustom instructions enable you to define common guidelines and rules that automatically influence how AI generates code and handles other development tasks. Instead of manually including context in every chat prompt, specify custom instructions in a Markdown file to ensure consistent AI responses that align with your coding practices and project requirements.\n\nYou can configure custom instructions to apply automatically to all chat requests or to specific files only. Alternatively, you can manually attach custom instructions to a specific chat prompt.\n\n**Note:** Custom instructions are not taken into account for code completions as you type in the editor.\n\n## Types of Instruction Files\n\nVS Code supports two types of Markdown-based instruction files:\n\n- **.github/copilot-instructions.md** – Global instructions applied to all chat requests.\n- **.instructions.md files** – One or more files for specific tasks or file patterns, using `applyTo` in the frontmatter to define scope.\n\nWhitespace between instructions is ignored, and you can reference files or URLs with Markdown links.\n\n## Examples\n\n### General Coding Guidelines\n```markdown\n---\napplyTo: \"**\"\n---\n# Project general coding standards\n\n## Naming Conventions\n- Use PascalCase for components, interfaces, and type aliases\n- Use camelCase for variables, functions, and methods\n- Prefix private class members with _\n- Use ALL_CAPS for constants\n\n## Error Handling\n- Use try/catch blocks for async operations\n- Implement error boundaries in React\n- Always log errors with context\n```\n\n### TypeScript and React Guidelines\n```markdown\n---\napplyTo: \"**/*.ts,**/*.tsx\"\n---\n# Project coding standards for TypeScript and React\n\nApply the [general coding guidelines](./general-coding.instructions.md) to all code.\n\n## TypeScript Guidelines\n- Use TypeScript for all new code\n- Prefer immutable data (const, readonly)\n- Use optional chaining (?.) and nullish coalescing (??)\n\n## React Guidelines\n- Use functional components with hooks\n- Follow React hooks rules\n- Use React.FC type for components with children\n```\n\n### Documentation Guidelines\n```markdown\n---\napplyTo: \"docs/**/*.md\"\n---\n# Documentation writing guidelines\n- Write clear, concise documentation\n- Use present tense and active voice\n- Organize with headings and lists\n```\n\n## Creating an Instructions File\n\nYou can create instruction files via Chat view (**Configure Chat > Instructions > New Instruction File**) or the Command Palette (**Chat: New Instructions File**). Store them in the workspace or user profile.\n\n## Settings-based Instructions\n\nYou can configure instructions in settings.json for specific scenarios:\n\n```json\n{\n  \"github.copilot.chat.pullRequestDescriptionGeneration.instructions\": [\n    { \"text\": \"Always include a list of key changes.\" }\n  ],\n  \"github.copilot.chat.reviewSelection.instructions\": [\n    { \"file\": \"guidance/backend-review-guidelines.md\" }\n  ]\n}\n```\n\n## Tips\n\n- Keep instructions short and self-contained\n- Use multiple files for task/language-specific guidance\n- Store project-specific files in the repo for collaboration\n- Reuse and reference files to avoid duplication\n",

  "instructions_files": [
    {
      "name": ".github/copilot-instructions.md",
      "description": "Archivo único que aplica instrucciones globales a todos los prompts del workspace.",
      "scope": "workspace",
      "type": "global",
      "format": "markdown",
      "notes": [
        "Ubicado en la raíz del workspace dentro de .github/",
        "VS Code lo aplica automáticamente a todos los prompts de chat"
      ],
      "example": {
        "applyTo": "**",
        "body": "# Project general coding standards\\n..."
      }
    },
    {
      "name": "*.instructions.md",
      "description": "Archivos múltiples para instrucciones específicas (por lenguaje, tarea, o docs).",
      "scope": "workspace or user profile",
      "type": "scoped",
      "frontmatter": ["description", "applyTo"],
      "examples": [
        {
          "applyTo": "**/*.ts,**/*.tsx",
          "body": "# Project coding standards for TypeScript and React\\n..."
        },
        {
          "applyTo": "docs/**/*.md",
          "body": "# Project documentation writing guidelines\\n..."
        }
      ]
    }
  ],

  "settings_based_instructions": {
    "description": "Definición de instrucciones mediante settings.json en VS Code",
    "fields": [
      "github.copilot.chat.reviewSelection.instructions",
      "github.copilot.chat.commitMessageGeneration.instructions",
      "github.copilot.chat.pullRequestDescriptionGeneration.instructions"
    ],
    "example_json": {
      "github.copilot.chat.pullRequestDescriptionGeneration.instructions": [
        { "text": "Always include a list of key changes." }
      ],
      "github.copilot.chat.reviewSelection.instructions": [
        { "file": "guidance/backend-review-guidelines.md" }
      ]
    }
  },

  "tips": [
    "Mantener las instrucciones cortas y auto-contenidas.",
    "Usar múltiples archivos para distintos lenguajes o tareas.",
    "Reutilizar archivos en prompts y chat modes para evitar duplicación."
  ],

  "type": "reference"
}
